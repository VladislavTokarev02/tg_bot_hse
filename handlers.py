from aiogram import Router, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Form
from users import user_profiles, user_water_log
import utils
from utils import calculate_water_goal, get_temperature, get_food_info, log_workout, check_progress, send_progress_charts
import logging
import asyncio

router = Router()  # –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –≥—Ä—É–ø–ø—ã —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/set_profile"), KeyboardButton(text="/log_water")],
        [KeyboardButton(text="/log_food"), KeyboardButton(text="/log_workout")],
        [KeyboardButton(text="/check_progress"), KeyboardButton(text="/help")],
    ],
    resize_keyboard=True
)


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "C–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_water  - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã\n"
        "/log_food  - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∏—â–∏\n"
        "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö> - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    )
    await message.reply(help_text, reply_markup=main_keyboard)

# FSM: –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(Command("set_profile"))
async def start_form(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(Form.weight)

@router.message(Form.weight)
async def weight_form(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(Form.height)

@router.message(Form.height)
async def height_form(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)

@router.message(Form.age)
async def age_form(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(Form.activity)

@router.message(Form.activity)
async def activity_form(message: Message, state: FSMContext):
    await state.update_data(activity=message.text)
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")
    await state.set_state(Form.city)

@router.message(Form.city)
async def city_form(message: Message, state: FSMContext):
    await state.update_data(city=message.text)

    data = await state.get_data()

    user_profiles[message.from_user.id] = {
        "weight": data["weight"],
        "height": data["height"],
        "age": data["age"],
        "activity": data["activity"],
        "city": data["city"],
        "water_intake": 0
    }

    try:
        temperature = await get_temperature(message.from_user.id)
        water_goal = calculate_water_goal(float(data["weight"]), int(data["activity"]), temperature)

        profile_info = (
            f"*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω:*\n\n"
            f"–í–µ—Å: {data['weight']} –∫–≥\n"
            f"–†–æ—Å—Ç: {data['height']} —Å–º\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']} –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n"
            f"–ì–æ—Ä–æ–¥: {data['city']}\n\n"
            f"*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C*\n"
            f"*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª –≤ –¥–µ–Ω—å*\n"
            f"*–í—ã–ø–∏—Ç–æ: {user_profiles[message.from_user.id]['water_intake']} –º–ª*"
        )

        await message.reply(profile_info, parse_mode="Markdown")
    except ValueError as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

    await state.clear()


@router.message(Command("log_water"))
async def log_water(message: Message):
    try:
        water_amount = int(message.text.split()[1])
        user_id = message.from_user.id


        if user_id in user_profiles:
            user_data = user_profiles[user_id]


            user_data['water_intake'] += water_amount


            temperature = await get_temperature(user_id)
            water_goal = calculate_water_goal(
                float(user_data["weight"]),
                int(user_data["activity"]),
                temperature,
            )


            total_intake = user_data['water_intake']
            remaining_water = max(0, water_goal - total_intake)

            reply_text = (
                f"–ó–∞–ø–∏—Å–∞–Ω–æ {water_amount} –º–ª –≤–æ–¥—ã.\n"
                f"–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {total_intake} –º–ª.\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ—Ä–º—ã: {remaining_water} –º–ª.\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal} –º–ª."
            )

            await message.reply(reply_text)

        else:
            await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
    except (IndexError, ValueError):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö. –ü—Ä–∏–º–µ—Ä: /log_water 250.")



@router.message(Command('log_food'))
async def log_food_handler(message: Message):
    user_id = message.from_user.id


    if user_id not in user_profiles:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return


    await message.reply("üçé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    user_profiles[user_id]['state'] = 'waiting_for_food_name'


@router.message(lambda message: user_profiles.get(message.from_user.id, {}).get('state') == 'waiting_for_food_name')
async def handle_food_name(message: Message):
    user_id = message.from_user.id
    food_name = message.text.strip()
    food_data = await get_food_info(food_name)

    if food_data:
        calories_per_100g = food_data['calories']
        user_profiles[user_id]['food_name'] = food_data['name']
        user_profiles[user_id]['calories_per_100g'] = calories_per_100g
        user_profiles[user_id]['state'] = 'waiting_for_food_amount'

        await message.reply(
            f"üçé {food_data['name']} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
    else:
        await message.reply("üôÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç.")



@router.message(lambda message: user_profiles.get(message.from_user.id, {}).get('state') == 'waiting_for_food_amount')
async def handle_food_amount(message: Message):
    user_id = message.from_user.id

    try:

        grams = float(message.text.strip())
        calories_per_100g = user_profiles[user_id].get('calories_per_100g', 0)
        total_calories = (grams / 100) * calories_per_100g


        if 'calories_consumed' not in user_profiles[user_id]:
            user_profiles[user_id]['calories_consumed'] = 0
        user_profiles[user_id]['calories_consumed'] += total_calories

        await message.reply(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.1f} –∫–∫–∞–ª ({grams} –≥ {user_profiles[user_id]['food_name']}).\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: {user_profiles[user_id]['calories_consumed']:.1f} –∫–∫–∞–ª."
        )
        user_profiles[user_id]['state'] = None

    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")


@router.message(Command('log_workout'))
async def log_workout_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in user_profiles:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            raise IndexError

        workout_type = args[1].lower()
        duration = int(args[2])  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö

        if duration <= 0:
            await message.reply("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä:\n"
                                "/log_workout –±–µ–≥ 30")
            return


        calories_burned, water_additional = log_workout(user_id, workout_type, duration)

        await message.reply(
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {workout_type.capitalize()} –Ω–∞ {duration} –º–∏–Ω—É—Ç.\n"
            f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned:.0f} –∫–∫–∞–ª.\n"
            f"üíß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã: {water_additional:.2f} –ª."
        )
    except IndexError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä:\n"
                            "/log_workout –±–µ–≥ 30")
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä:\n"
                            "/log_workout –±–µ–≥ 30")


@router.message(Command('check_progress'))
async def check_progress_handler(message: Message):
    user_id = message.from_user.id
    if user_id not in user_profiles:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    water_consumed_ml, _, calories_consumed, calories_burned = check_progress(user_id)

    user_data = user_profiles[user_id]
    temperature = await get_temperature(user_id)
    water_goal_ml = calculate_water_goal(
        float(user_data["weight"]),
        int(user_data["activity"]),
        temperature,
    )

    water_consumed_l = water_consumed_ml / 1000.0
    water_goal_l = water_goal_ml / 1000.0
    water_remaining_l = max(0, water_goal_l - water_consumed_l)

    await message.reply(
        f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"üíß –í–æ–¥–∞:\n"
        f"    - –í—ã–ø–∏—Ç–æ: {water_consumed_l:.2f} –ª –∏–∑ {water_goal_l:.2f} –ª.\n"
        f"    - –û—Å—Ç–∞–ª–æ—Å—å: {water_remaining_l:.2f} –ª.\n\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏:\n"
        f"    - –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {calories_consumed:.0f} –∫–∫–∞–ª.\n"
        f"    - –°–æ–∂–∂–µ–Ω–æ: {calories_burned:.0f} –∫–∫–∞–ª.\n"
    )

    await send_progress_charts(message, water_consumed_l, water_remaining_l, calories_consumed, calories_burned, water_goal_l)













